name: CI/CD Pipeline

on:
  pull_request:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  RUBY_VERSION: 3.4.2
  NODE_VERSION: 18

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'app/**'
              - 'config/**'
              - 'db/**'
              - 'lib/**'
              - 'Gemfile*'
              - '.ruby-version'
            frontend:
              - 'app/assets/**'
              - 'app/javascript/**'
              - 'app/views/**'
            docker:
              - 'Dockerfile*'
              - '.dockerignore'

  security_scan:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Run Brakeman security scan
        run: |
          bin/brakeman --no-pager --format json --output brakeman-report.json
          bin/brakeman --no-pager

      - name: Upload Brakeman report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: brakeman-report
          path: brakeman-report.json

  js_security_scan:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Scan JavaScript dependencies
        run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Run RuboCop
        run: |
          bin/rubocop --format json --out rubocop-report.json
          bin/rubocop --format github

      - name: Upload RuboCop report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rubocop-report
          path: rubocop-report.json

  test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: learn_with_me_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            build-essential \
            git \
            libyaml-dev \
            pkg-config \
            google-chrome-stable \
            postgresql-client \
            libpq-dev

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Set up test database
        env:
          RAILS_ENV: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
          POSTGRES_DB_TEST: learn_with_me_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          bin/rails db:create db:schema:load

      - name: Run tests
        env:
          RAILS_ENV: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
          POSTGRES_DB_TEST: learn_with_me_test
          REDIS_URL: redis://localhost:6379/0
          CI: true
        run: |
          bin/rails test

      - name: Run system tests
        env:
          RAILS_ENV: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
          POSTGRES_DB_TEST: learn_with_me_test
          REDIS_URL: redis://localhost:6379/0
          CI: true
        run: |
          bin/rails test:system

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          if-no-files-found: ignore

      - name: Upload system test screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: system-test-screenshots
          path: tmp/screenshots/
          if-no-files-found: ignore

  build_docker:
    runs-on: ubuntu-latest
    needs: [test, security_scan, lint]
    if: |
      always() && 
      (needs.test.result == 'success' || needs.test.result == 'skipped') &&
      (needs.security_scan.result == 'success' || needs.security_scan.result == 'skipped') &&
      (needs.lint.result == 'success' || needs.lint.result == 'skipped') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/learn-with-me
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy_staging:
    runs-on: ubuntu-latest
    needs: [build_docker]
    if: |
      github.ref == 'refs/heads/develop' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Deploy to staging
        id: deploy
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build_docker.outputs.image-tag }}"
          echo "url=https://staging.learnwithme.app" >> $GITHUB_OUTPUT
          # Add your actual deployment commands here
          # Example: kubectl, docker-compose, or deployment service API calls

  deploy_production:
    runs-on: ubuntu-latest
    needs: [build_docker]
    if: |
      github.ref == 'refs/heads/main' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production')
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Deploy to production
        id: deploy
        run: |
          echo "Deploying to production environment..."
          echo "Image: ${{ needs.build_docker.outputs.image-tag }}"
          echo "url=https://learnwithme.app" >> $GITHUB_OUTPUT
          # Add your actual deployment commands here
          # Example: kubectl, docker-compose, or deployment service API calls

  notify:
    runs-on: ubuntu-latest
    needs: [deploy_staging, deploy_production]
    if: always() && (needs.deploy_staging.result != 'skipped' || needs.deploy_production.result != 'skipped')
    
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy_staging.result }}" == "success" ]]; then
            echo "✅ Staging deployment successful"
          elif [[ "${{ needs.deploy_production.result }}" == "success" ]]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Deployment failed"
          fi
          # Add notification logic here (Slack, email, etc.)
